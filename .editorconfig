###############################
# Core EditorConfig Options   #
###############################
root = true

# All files
[*]
indent_style = space
tab_width = 4
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true
max_line_length = 120

# Markdown files
[*.md]
trim_trailing_whitespace = false
max_line_length = off

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.{json,jsonc}]
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_size = 2

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
charset = utf-8
max_line_length = 120

###############################
# .NET Coding Conventions     #
###############################
[*.{cs,vb}]
# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# this. preferences
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_event = false:warning

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning
dotnet_style_readonly_field = true:warning

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent

# CA rules for production quality - start with suggestions
dotnet_diagnostic.CA1031.severity = suggestion  # Do not catch general exception types
dotnet_diagnostic.CA1062.severity = suggestion  # Validate arguments of public methods
dotnet_diagnostic.CA1303.severity = none        # Do not pass literals as localized parameters
dotnet_diagnostic.CA2007.severity = suggestion  # Consider calling ConfigureAwait
dotnet_diagnostic.CA1724.severity = suggestion  # Type names should not match namespaces
dotnet_diagnostic.CA1305.severity = suggestion  # Specify IFormatProvider
dotnet_diagnostic.CA2201.severity = suggestion  # Do not raise reserved exception types
dotnet_diagnostic.CA1812.severity = suggestion  # Avoid uninstantiated internal classes
dotnet_diagnostic.CA1308.severity = suggestion  # Normalize strings to uppercase
dotnet_diagnostic.CA1716.severity = suggestion  # Identifiers should not match keywords

# Async/Await rules
dotnet_diagnostic.CS4014.severity = error    # Because this call is not awaited
dotnet_diagnostic.CA2016.severity = warning  # Forward the 'CancellationToken' parameter

# Nullable reference types (C# 8.0+)
dotnet_diagnostic.CS8600.severity = warning  # Converting null literal or possible null value
dotnet_diagnostic.CS8601.severity = warning  # Possible null reference assignment
dotnet_diagnostic.CS8602.severity = warning  # Dereference of a possibly null reference
dotnet_diagnostic.CS8603.severity = warning  # Possible null reference return
dotnet_diagnostic.CS8604.severity = warning  # Possible null reference argument
dotnet_diagnostic.CS8618.severity = warning  # Non-nullable field must contain a non-null value
dotnet_diagnostic.CS8625.severity = warning  # Cannot convert null literal to non-nullable reference

###############################
# Naming Conventions          #
###############################

# Interfaces should be prefixed with I
dotnet_naming_rule.interface_should_be_prefixed_with_i.severity = warning
dotnet_naming_rule.interface_should_be_prefixed_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_prefixed_with_i.style = prefix_interface_with_i

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected

dotnet_naming_style.prefix_interface_with_i.required_prefix = I
dotnet_naming_style.prefix_interface_with_i.capitalization = pascal_case

# Types should be PascalCase
dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum, delegate
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected

# Non-field members should be PascalCase
dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected

# Private fields should be _camelCase
dotnet_naming_rule.private_fields_should_be_camel_case_with_underscore.severity = warning
dotnet_naming_rule.private_fields_should_be_camel_case_with_underscore.symbols = private_fields
dotnet_naming_rule.private_fields_should_be_camel_case_with_underscore.style = camel_case_with_underscore

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

dotnet_naming_style.camel_case_with_underscore.required_prefix = _
dotnet_naming_style.camel_case_with_underscore.capitalization = camel_case

# Constants should be PascalCase
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities = *
dotnet_naming_symbols.constant_fields.required_modifiers = const

# Static readonly fields should be PascalCase
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.applicable_accessibilities = public, internal, protected, protected_internal, private_protected
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly

# Style definitions
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

###############################
# C# Coding Conventions       #
###############################
[*.cs]
# var preferences - more strict for production
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:warning

# Expression-bodied members
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_constructors = false:warning
csharp_style_expression_bodied_operators = false:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:suggestion

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning

# Expression-level preferences
csharp_prefer_braces = true:warning
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

# Namespaces - file-scoped for modern C#
csharp_style_namespace_declarations = file_scoped:warning

# Using directives
csharp_using_directive_placement = outside_namespace:warning
csharp_prefer_simple_using_statement = true:suggestion

# Modern C# features
csharp_style_prefer_method_group_conversion = true:suggestion
csharp_style_prefer_top_level_statements = false:suggestion  # Usually false for DDD projects
csharp_style_prefer_primary_constructors = false:suggestion   # Usually false for DDD entities

###############################
# C# Formatting Rules         #
###############################
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left
csharp_indent_block_contents = true
csharp_indent_braces = false

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

###############################
# Code Analysis Rules         #
###############################
[*.cs]
# Design rules
dotnet_diagnostic.CA1000.severity = warning  # Do not declare static members on generic types
dotnet_diagnostic.CA1001.severity = warning  # Types that own disposable fields should be disposable
dotnet_diagnostic.CA1002.severity = warning  # Do not expose generic lists
dotnet_diagnostic.CA1003.severity = warning  # Use generic event handler instances
dotnet_diagnostic.CA1005.severity = warning  # Avoid excessive parameters on generic types
dotnet_diagnostic.CA1008.severity = warning  # Enums should have zero value
dotnet_diagnostic.CA1010.severity = warning  # Collections should implement generic interface
dotnet_diagnostic.CA1012.severity = warning  # Abstract types should not have constructors
dotnet_diagnostic.CA1014.severity = suggestion # Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1016.severity = warning  # Mark assemblies with assembly version
dotnet_diagnostic.CA1017.severity = suggestion # Mark assemblies with ComVisible
dotnet_diagnostic.CA1018.severity = warning  # Mark attributes with AttributeUsageAttribute

# Documentation rules
dotnet_diagnostic.CA1200.severity = suggestion # Avoid using cref tags with a prefix

# Globalization rules
dotnet_diagnostic.CA1303.severity = suggestion # Do not pass literals as localized parameters
dotnet_diagnostic.CA1304.severity = warning  # Specify CultureInfo
dotnet_diagnostic.CA1305.severity = warning  # Specify IFormatProvider
dotnet_diagnostic.CA1307.severity = warning  # Specify StringComparison
dotnet_diagnostic.CA1308.severity = warning  # Normalize strings to uppercase
dotnet_diagnostic.CA1309.severity = warning  # Use ordinal stringcomparison

# Interoperability rules
dotnet_diagnostic.CA1401.severity = warning  # P/Invokes should not be visible

# Maintainability rules
dotnet_diagnostic.CA1501.severity = warning  # Avoid excessive inheritance
dotnet_diagnostic.CA1502.severity = warning  # Avoid excessive complexity
dotnet_diagnostic.CA1505.severity = warning  # Avoid unmaintainable code
dotnet_diagnostic.CA1506.severity = warning  # Avoid excessive class coupling

# Naming rules
dotnet_diagnostic.CA1707.severity = warning  # Identifiers should not contain underscores
dotnet_diagnostic.CA1708.severity = warning  # Identifiers should differ by more than case
dotnet_diagnostic.CA1710.severity = warning  # Identifiers should have correct suffix
dotnet_diagnostic.CA1711.severity = warning  # Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1712.severity = warning  # Do not prefix enum values with type name
dotnet_diagnostic.CA1714.severity = warning  # Flags enums should have plural names
dotnet_diagnostic.CA1715.severity = warning  # Identifiers should have correct prefix
dotnet_diagnostic.CA1716.severity = warning  # Identifiers should not match keywords
dotnet_diagnostic.CA1717.severity = warning  # Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1720.severity = warning  # Identifier contains type name
dotnet_diagnostic.CA1721.severity = warning  # Property names should not match get methods
dotnet_diagnostic.CA1724.severity = warning  # Type names should not match namespaces
dotnet_diagnostic.CA1725.severity = warning  # Parameter names should match base declaration

# Performance rules
dotnet_diagnostic.CA1802.severity = warning  # Use literals where appropriate
dotnet_diagnostic.CA1805.severity = warning  # Do not initialize unnecessarily
dotnet_diagnostic.CA1806.severity = warning  # Do not ignore method results
dotnet_diagnostic.CA1810.severity = warning  # Initialize reference type static fields inline
dotnet_diagnostic.CA1812.severity = warning  # Avoid uninstantiated internal classes
dotnet_diagnostic.CA1813.severity = warning  # Avoid unsealed attributes
dotnet_diagnostic.CA1814.severity = warning  # Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1815.severity = warning  # Override equals and operator equals on value types
dotnet_diagnostic.CA1819.severity = warning  # Properties should not return arrays
dotnet_diagnostic.CA1820.severity = warning  # Test for empty strings using string length
dotnet_diagnostic.CA1821.severity = warning  # Remove empty Finalizers
dotnet_diagnostic.CA1822.severity = suggestion # Mark members as static
dotnet_diagnostic.CA1823.severity = warning  # Avoid unused private fields
dotnet_diagnostic.CA1824.severity = warning  # Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1825.severity = warning  # Avoid zero-length array allocations

# Reliability rules
dotnet_diagnostic.CA2000.severity = warning  # Dispose objects before losing scope
dotnet_diagnostic.CA2002.severity = warning  # Do not lock on objects with weak identity
dotnet_diagnostic.CA2007.severity = suggestion # Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2008.severity = warning  # Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2009.severity = warning  # Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2011.severity = warning  # Avoid infinite recursion
dotnet_diagnostic.CA2012.severity = warning  # Use ValueTasks correctly
dotnet_diagnostic.CA2013.severity = warning  # Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2014.severity = warning  # Do not use stackalloc in loops
dotnet_diagnostic.CA2015.severity = warning  # Do not define finalizers for types derived from MemoryManager&lt;T&gt;
dotnet_diagnostic.CA2016.severity = warning  # Forward the 'CancellationToken' parameter to methods that take one

# Security rules
dotnet_diagnostic.CA2100.severity = warning  # Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2101.severity = warning  # Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2109.severity = warning  # Review visible event handlers
dotnet_diagnostic.CA2119.severity = warning  # Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2153.severity = warning  # Do Not Catch Corrupted State Exceptions
dotnet_diagnostic.CA2300.severity = warning  # Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2301.severity = warning  # Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2302.severity = warning  # Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2305.severity = warning  # Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2310.severity = warning  # Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2311.severity = warning  # Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2312.severity = warning  # Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2315.severity = warning  # Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2321.severity = warning  # Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2322.severity = warning  # Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing

# Usage rules
dotnet_diagnostic.CA2200.severity = warning  # Rethrow to preserve stack details
dotnet_diagnostic.CA2201.severity = warning  # Do not raise reserved exception types
dotnet_diagnostic.CA2207.severity = warning  # Initialize value type static fields inline
dotnet_diagnostic.CA2208.severity = warning  # Instantiate argument exceptions correctly
dotnet_diagnostic.CA2211.severity = warning  # Non-constant fields should not be visible
dotnet_diagnostic.CA2213.severity = warning  # Disposable fields should be disposed
dotnet_diagnostic.CA2214.severity = warning  # Do not call overridable methods in constructors
dotnet_diagnostic.CA2215.severity = warning  # Dispose methods should call base class dispose
dotnet_diagnostic.CA2216.severity = warning  # Disposable types should declare finalizer
dotnet_diagnostic.CA2217.severity = warning  # Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2219.severity = warning  # Do not raise exceptions in finally clauses
dotnet_diagnostic.CA2225.severity = warning  # Operator overloads have named alternates
dotnet_diagnostic.CA2226.severity = warning  # Operators should have symmetrical overloads
dotnet_diagnostic.CA2227.severity = warning  # Collection properties should be read only
dotnet_diagnostic.CA2229.severity = warning  # Implement serialization constructors
dotnet_diagnostic.CA2231.severity = warning  # Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2234.severity = warning  # Pass system uri objects instead of strings
dotnet_diagnostic.CA2235.severity = warning  # Mark all non-serializable fields
dotnet_diagnostic.CA2237.severity = warning  # Mark ISerializable types with serializable
dotnet_diagnostic.CA2241.severity = warning  # Provide correct arguments to formatting methods
dotnet_diagnostic.CA2242.severity = warning  # Test for NaN correctly
dotnet_diagnostic.CA2243.severity = warning  # Attribute string literals should parse correctly
dotnet_diagnostic.CA2244.severity = warning  # Do not duplicate indexed element initializations
dotnet_diagnostic.CA2245.severity = warning  # Do not assign a property to itself
dotnet_diagnostic.CA2246.severity = warning  # Assigning symbol and its member in the same statement
dotnet_diagnostic.CA2247.severity = warning  # Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2248.severity = warning  # Provide correct 'enum' argument to 'Enum.HasFlag'
dotnet_diagnostic.CA2249.severity = warning  # Consider using 'string.Contains' instead of 'string.IndexOf'

###############################
# Generated/Auto-generated Files#
###############################
[**/Migrations/**.cs]
# Skip all rules for EF migrations (auto-generated)
dotnet_analyzer_diagnostic.category-style.severity = none
dotnet_analyzer_diagnostic.category-naming.severity = none
dotnet_diagnostic.IDE1006.severity = none
dotnet_diagnostic.CA1031.severity = none
dotnet_diagnostic.CA1062.severity = none
dotnet_diagnostic.CA1303.severity = none
dotnet_diagnostic.CA1305.severity = none
dotnet_diagnostic.CA1707.severity = none
dotnet_diagnostic.CA1716.severity = none
dotnet_diagnostic.CA1724.severity = none
dotnet_diagnostic.CA1812.severity = none
dotnet_diagnostic.CA2007.severity = none
dotnet_diagnostic.CA2201.severity = none
generated_code = true

[*.Designer.cs]
# Skip rules for designer files
dotnet_analyzer_diagnostic.category-style.severity = none
dotnet_analyzer_diagnostic.category-naming.severity = none
generated_code = true

[*.designer.cs]  
# Alternative naming convention
dotnet_analyzer_diagnostic.category-style.severity = none
dotnet_analyzer_diagnostic.category-naming.severity = none
generated_code = true

[AssemblyInfo.cs]
# Skip rules for assembly info
dotnet_analyzer_diagnostic.category-style.severity = none
generated_code = true

[GlobalSuppressions.cs]
# Skip rules for global suppressions
dotnet_analyzer_diagnostic.category-style.severity = none
generated_code = true

###############################
# Test Files                  #
###############################
[*Tests.cs,*Test.cs,*.Tests.cs,*.Test.cs]
# Relax some rules for test files
dotnet_diagnostic.CA1062.severity = none     # Validate arguments of public methods
dotnet_diagnostic.CA1707.severity = none     # Identifiers should not contain underscores
dotnet_diagnostic.CA1303.severity = none     # Do not pass literals as localized parameters
dotnet_diagnostic.CA2007.severity = none     # Consider calling ConfigureAwait

###############################
# VB Coding Conventions       #
###############################
[*.vb]
# Modifier preferences
visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:suggestion